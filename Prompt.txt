# サーバーワークス コーポレートWebサイト作成プロンプト

## プロジェクト概要
サーバーワークス（AWS専業システムインテグレーター）のコーポレートWebサイトを作成し、GitHubリポジトリにpushしてください。

## 会社情報
- **会社名**: サーバーワークス
- **事業内容**: AWS専業のシステムインテグレーター
- **主な強み**:
  - AWSプレミアパートナーに選出
  - 高い技術力
  - クラウドシェルパという伴走支援サービス

## 技術要件

### 使用技術
- **HTML5**: セマンティックなマークアップ
- **TypeScript**: 型安全なJavaScript開発
- **Bootstrap 5**: レスポンシブUIフレームワーク
- **CSS3**: カスタムスタイリング

### デザイン要件
- **カラーテーマ**: オレンジ（プライマリ）と白色（セカンダリ）
- **デザイン方向性**: モダンで信頼感のある企業サイト
- **レスポンシブ対応**: モバイル・タブレット・デスクトップ対応必須

## ページ構成（単一ページ）

### 1. ヘッダーセクション
- ナビゲーションバー（Bootstrap Navbar）
- ロゴ表示（serverworks_logo_H_1_l.jpg.webp使用）
- メニュー: Home, About, Services, Contact

### 2. ヒーローセクション
- キャッチコピー: "AWSのプロフェッショナルパートナー"
- サブタイトル: "技術力と伴走支援で、お客様のクラウド活用を成功に導きます"
- CTAボタン: "お問い合わせ"

### 3. 強みセクション（3カラム）
#### A. AWSプレミアパートナー
- アイコン: AWS関連のアイコン
- 説明: AWSから認められた高い技術力と実績

#### B. 技術力の高さ
- アイコン: 技術・エンジニアリング関連アイコン
- 説明: 豊富な経験と最新技術への対応力

#### C. クラウドシェルパ
- アイコン: サポート・伴走関連アイコン
- 説明: お客様に寄り添う伴走支援サービス

### 4. サービス紹介セクション
- AWS移行支援
- インフラ設計・構築
- 運用・保守サポート
- 技術コンサルティング

### 5. お問い合わせセクション
- 簡潔なコンタクトフォーム
- 会社情報（住所・電話番号はダミーデータ使用）

### 6. フッター
- 会社名とコピーライト
- ソーシャルリンク（プレースホルダー）

## ファイル構成

以下のファイル構成で作成してください：

```
/
├── index.html          # メインHTMLファイル
├── assets/
│   ├── css/
│   │   └── style.css   # カスタムCSS
│   ├── js/
│   │   └── main.ts     # TypeScriptファイル
│   └── images/
│       └── serverworks_logo_H_1_l.jpg.webp  # ロゴファイル
└── README.md           # プロジェクト説明
```

## 実装仕様

### HTML要件
- HTML5のセマンティックタグを使用（header, nav, main, section, footer）
- Bootstrap 5.3.x CDNを使用
- レスポンシブメタタグを含める
- アクセシビリティに配慮（alt属性、適切な見出し構造）

### CSS要件
- Bootstrap utilityクラスを活用
- カスタムCSS変数でオレンジ色テーマを定義
- ホバーエフェクトとスムーズなトランジション
- モバイルファーストのレスポンシブデザイン

### TypeScript要件
- 型定義を適切に設定
- DOM操作の型安全性を確保
- Bootstrap JavaScriptコンポーネントとの連携
- フォームバリデーション機能

### カラーパレット
```css
:root {
  --primary-orange: #FF6B35;
  --secondary-orange: #F7931E;
  --white: #FFFFFF;
  --light-gray: #F8F9FA;
  --dark-gray: #6C757D;
  --text-dark: #212529;
}
```

## Git操作手順

### リポジトリ情報
- **リポジトリURL**: https://github.com/Morimasa-dev1/gen-ai-project-repo.git
- **ブランチ**: main（直接push）
- **認証**: GitHub CLI設定済み

### 実行手順
1. 現在のディレクトリで作業: `/home/morii/work/amazon-q/sisco-demo/gen-ai-project-repo`
2. ファイル作成
3. Git add & commit
4. Git push origin main

## 実装の優先順位

### Phase 1: 基本構造
1. HTML基本構造の作成
2. Bootstrap導入
3. レスポンシブレイアウト

### Phase 2: コンテンツ実装
1. 各セクションの内容実装
2. ロゴとイメージの配置
3. カスタムCSS適用

### Phase 3: インタラクション
1. TypeScript機能実装
2. フォームバリデーション
3. スムーズスクロール

### Phase 4: 最終調整
1. モバイル対応確認
2. アクセシビリティチェック
3. Git commit & push

## 注意事項

- ロゴファイル（serverworks_logo_H_1_l.jpg.webp）は同じディレクトリに既に配置済み
- その他の画像は適切なプレースホルダーまたはアイコンを使用
- 本番環境を想定した品質で作成
- TypeScriptコンパイル設定も含める（tsconfig.json）
- パフォーマンスとSEOに配慮

## 期待する成果物

1. 完全に動作するレスポンシブWebサイト
2. 型安全なTypeScriptコード
3. GitHubリポジトリへの正常なpush
4. モダンで企業らしいデザイン
5. 高いユーザビリティとアクセシビリティ

このプロンプトに従って、段階的にWebサイトを作成し、最終的にGitHubリポジトリにpushしてください。